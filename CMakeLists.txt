CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(guhck)
SET(GUHCK_NAME "guhck")
SET(GUHCK_DESCRIPTION ".hack//G.U data extraction tools")
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${guhck_SOURCE_DIR}/CMake/modules)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY bin)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY lib)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY lib)

# Sources
SET(LIBSRC "src/guhck.c" "lib/chck/buffer/buffer.c") # sources to be compiled
SET(LIBINC "lib/chck") # include directories
SET(LIBLIB "") # libraries to be linked
SET(LIBDEF "") # compile defines
SET(LIBPUB "") # public headers

FIND_PACKAGE(ZLIB REQUIRED)
LIST(APPEND LIBINC ${ZLIB_INCLUDE_DIRS})
LIST(APPEND LIBLIB ${ZLIB_LIBRARIES})

FIND_PACKAGE(PNG REQUIRED)
LIST(APPEND LIBINC ${PNG_INCLUDE_DIRS})
LIST(APPEND LIBLIB ${PNG_LIBRARIES})

FIND_LIBRARY(MATH_LIBRARY m)
MARK_AS_ADVANCED(MATH_LIBRARY)
IF (MATH_LIBRARY)
   LIST(APPEND LIBLIB ${MATH_LIBRARY})
ENDIF ()

# Warnings
IF (MSVC)
   IF (CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
      STRING(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
   ELSE ()
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
   ENDIF ()
ELSEIF (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
   SET(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -Wall -Wextra -Wno-variadic-macros -Wno-long-long")
   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-variadic-macros -Wno-long-long")
ENDIF ()

IF (UNIX AND CMAKE_COMPILER_IS_GNUCC)
   SET(CMAKE_POSITION_INDEPENDENT_CODE ON)
   IF (${CMAKE_VERSION} VERSION_LESS 2.8.9)
      ADD_DEFINITIONS(-fPIC)
   ENDIF ()
ENDIF ()

# Compile static lib
INCLUDE_DIRECTORIES(${LIBINC})
ADD_DEFINITIONS(${LIBDEF})
ADD_EXECUTABLE(guhck ${LIBSRC})
TARGET_LINK_LIBRARIES(guhck ${LIBLIB})

# vim: set ts=8 sw=3 tw=0
